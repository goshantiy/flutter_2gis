import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:file_picker/file_picker.dart';
import 'package:dgis_mobile_sdk_full/dgis.dart' as sdk;

class GeoJsonPointsPage extends StatefulWidget {
  final sdk.Context? sdkContext;

  const GeoJsonPointsPage({super.key, this.sdkContext});

  @override
  State<GeoJsonPointsPage> createState() => _GeoJsonPointsPageState();
}

class _GeoJsonPointsPageState extends State<GeoJsonPointsPage> {
  final TextEditingController _geoJsonController = TextEditingController();
  final TextEditingController _urlController = TextEditingController();
  List<Map<String, dynamic>> _markers = [];
  List<Map<String, dynamic>> _allMarkers = []; // –í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  bool _isLoading = false;
  bool _showMarkersList = false;
  bool _isInitialLoad = true;
  Set<String> _availableDates = {}; // –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  String? _selectedDate; // –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  sdk.CameraPosition _cameraPosition = sdk.CameraPosition(
    point: sdk.GeoPoint(
      latitude: sdk.Latitude(55.7539),
      longitude: sdk.Longitude(37.6156),
    ),
    zoom: sdk.Zoom(11.0),
  );
  
  // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–æ–π –∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏
  final _mapWidgetController = sdk.MapWidgetController();
  sdk.MapObjectManager? _mapObjectManager;

  @override
  void initState() {
    super.initState();
    _initializeMap();
    _loadSampleGeoJson();
  }

  void _initializeMap() {
    if (widget.sdkContext != null) {
      _mapWidgetController.getMapAsync((map) {
        _mapObjectManager = sdk.MapObjectManager(map);
        debugPrint('MapObjectManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      });
    }
  }

  void _loadSampleGeoJson() {
    // –ü—Ä–∏–º–µ—Ä GeoJSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ—á–µ–∫ –∏ –ª–∏–Ω–∏–π
    const sampleGeoJson = '''
{
  "type": "FeatureCollection",
  "name": "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –≤ –ú–æ—Å–∫–≤–µ",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "–Ω–∞–∑–≤–∞": "–§–µ—Å—Ç–∏–≤–∞–ª—å \\"–°–ø–∞—Å—Å–∫–∞—è –±–∞—à–Ω—è\\"",
        "–æ–ø–∏—Å–∞": "–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ñ–µ—Å—Ç–∏–≤–∞–ª—è. –í–µ—á–µ—Ä–Ω–µ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ - —Ü–µ—Ä–µ–º–æ–Ω–∏—è —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è",
        "–¥–∞—Ç–∞": "22.08.2025 20:00-22:30"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [37.620245338778268, 55.754154717527896]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "ST_NAME": "–¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞",
        "–æ–ø–∏—Å–∞": "–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ –¥–æ—Ä–æ–≥–∏ –Ω–∞ –≤—Ä–µ–º—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
        "–¥–∞—Ç–∞": "22.08.2025"
      },
      "geometry": {
        "type": "LineString",
        "coordinates": [
          [37.6156, 55.7539],
          [37.6180, 55.7560],
          [37.6200, 55.7580]
        ]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ",
        "description": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã –∏ –æ—Ç–¥—ã—Ö–∞",
        "date": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ 06:00-24:00"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [37.6017, 55.7312]
      }
    }
  ]
}''';
    _geoJsonController.text = sampleGeoJson;
  }

  Future<void> _loadGeoJsonFromFile() async {
    setState(() {
      _isLoading = true;
    });

    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.any,
        allowMultiple: false,
      );

      if (result != null && result.files.isNotEmpty) {
        final file = result.files.single;
        String content = '';
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        if (file.bytes != null) {
          // –í–µ–±-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∏–ª–∏ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å
          content = String.fromCharCodes(file.bytes!);
        } else if (file.path != null) {
          // –ú–æ–±–∏–ª—å–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã - —á–∏—Ç–∞–µ–º –ø–æ –ø—É—Ç–∏
          final fileContent = await File(file.path!).readAsString();
          content = fileContent;
        } else {
          throw Exception('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞');
        }

        if (content.isNotEmpty) {
          _geoJsonController.text = content;
          _isInitialLoad = false; // –≠—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
          
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('–§–∞–π–ª "${file.name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'),
              backgroundColor: Colors.green,
            ),
          );
        } else {
          throw Exception('–§–∞–π–ª –ø—É—Å—Ç–æ–π');
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω'),
            backgroundColor: Colors.orange,
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _showUrlDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å GeoJSON –ø–æ URL'),
          content: TextField(
            controller: _urlController,
            decoration: const InputDecoration(
              labelText: 'URL',
              hintText: 'https://example.com/data.geojson',
              border: OutlineInputBorder(),
            ),
            autofocus: true,
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('–û—Ç–º–µ–Ω–∞'),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                _loadGeoJsonFromUrl();
              },
              child: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å'),
            ),
          ],
        );
      },
    );
  }

  Future<void> _loadGeoJsonFromUrl() async {
    final url = _urlController.text.trim();
    if (url.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ GeoJSON'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final response = await http.get(Uri.parse(url));
      if (response.statusCode == 200) {
        _geoJsonController.text = response.body;
        _isInitialLoad = false; // –≠—Ç–æ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ URL
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('GeoJSON —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        throw Exception('HTTP ${response.statusCode}');
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  void _parseAndDisplayGeoJson() {
    try {
      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
      _clearMarkers();

      final geoJsonData = jsonDecode(_geoJsonController.text);

      if (geoJsonData['type'] == 'FeatureCollection') {
        final features = geoJsonData['features'] as List;
        int pointsCount = 0;
        int linesCount = 0;

        for (final feature in features) {
          final geometryType = feature['geometry']['type'];
          final properties = feature['properties'] as Map<String, dynamic>;

          // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø–æ–ª–µ–π
          String title = _getPropertyValue(properties, ['name', '–Ω–∞–∑–≤–∞', 'title', 'Name', 'ST_NAME']) ?? '';
          String description = _getPropertyValue(properties, ['description', '–æ–ø–∏—Å–∞', 'desc', 'Description']) ?? '';
          String date = _getPropertyValue(properties, ['date', '–¥–∞—Ç–∞', '–≤—Ä–µ–º—è', 'time']) ?? '';
          String edgeId = _getPropertyValue(properties, ['EdgeId', 'id', 'ID']) ?? '';
          
          // –î–µ–ª–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–∏–Ω–∏–π —Å EdgeId
          if (edgeId.isNotEmpty && geometryType == 'LineString') {
            title = title.isEmpty ? '–õ–∏–Ω–∏—è $edgeId' : '$title (ID: $edgeId)';
          }
          
          // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∞—Ç—É
          String fullDescription = description;
          if (date.isNotEmpty) {
            fullDescription = fullDescription.isEmpty ? date : '$description\nüìÖ $date';
          }

          if (geometryType == 'Point') {
            final coordinates = feature['geometry']['coordinates'] as List;
            final longitude = coordinates[0] as double;
            final latitude = coordinates[1] as double;

            _addMarker(
              latitude: latitude,
              longitude: longitude,
              title: title.isEmpty ? '–¢–æ—á–∫–∞' : title,
              description: fullDescription,
              date: date,
            );
            pointsCount++;
          } else if (geometryType == 'LineString') {
            final coordinates = feature['geometry']['coordinates'] as List;
            final points = <sdk.GeoPoint>[];
            
            for (final coord in coordinates) {
              final coordList = coord as List;
              points.add(sdk.GeoPoint(
                latitude: sdk.Latitude(coordList[1] as double),
                longitude: sdk.Longitude(coordList[0] as double),
              ));
            }

            _addLineString(
              points: points,
              title: title.isEmpty ? '–õ–∏–Ω–∏—è' : title,
              description: fullDescription,
              date: date,
            );
            linesCount++;
            debugPrint('–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏–Ω–∏—è $linesCount: $title —Å ${points.length} —Ç–æ—á–∫–∞–º–∏');
          }
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –æ–±—ä–µ–∫—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        // —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–∞
        if (!_isInitialLoad) {
          Future.delayed(const Duration(milliseconds: 500), () {
            _centerMapOnMarkers();
          });
        }
        
        // –í–ê–ñ–ù–û: –ù–ï –°–ë–†–ê–°–´–í–ê–ï–ú _isInitialLoad –∑–¥–µ—Å—å!
        // –û–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä—É—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        if (!_isInitialLoad) {
          _filterMarkersByDate(_selectedDate);
        } else {
          // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
          _markers = List.from(_allMarkers);
        }
        
        String message = '';
        if (pointsCount > 0 && linesCount > 0) {
          message = '–î–æ–±–∞–≤–ª–µ–Ω–æ $pointsCount —Ç–æ—á–µ–∫ –∏ $linesCount –ª–∏–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É';
        } else if (pointsCount > 0) {
          message = '–î–æ–±–∞–≤–ª–µ–Ω–æ $pointsCount —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç—É';
        } else if (linesCount > 0) {
          message = '–î–æ–±–∞–≤–ª–µ–Ω–æ $linesCount –ª–∏–Ω–∏–π –Ω–∞ –∫–∞—Ä—Ç—É';
        } else {
          message = '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        }
        
        if (_availableDates.isNotEmpty) {
          message += '\n–î–æ—Å—Ç—É–ø–Ω–æ –¥–∞—Ç: ${_availableDates.length}';
        }
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(message),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ GeoJSON: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–∞–º
  String? _getPropertyValue(Map<String, dynamic> properties, List<String> keys) {
    for (String key in keys) {
      if (properties.containsKey(key) && properties[key] != null) {
        return properties[key].toString();
      }
    }
    return null;
  }

  void _addMarker({
    required double latitude,
    required double longitude,
    required String title,
    required String description,
    String? date,
  }) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    final markerData = {
      'latitude': latitude,
      'longitude': longitude,
      'title': title,
      'description': description,
      'date': date ?? '',
      'type': 'point',
    };

    _allMarkers.add(markerData);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
    if (date != null && date.isNotEmpty) {
      _availableDates.add(date);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    if (!_isInitialLoad) {
      Future.delayed(const Duration(milliseconds: 100), () {
        _addRealMarkerToMap(latitude, longitude, title, description, date);
      });
    }
  }

  Future<void> _addRealMarkerToMap(
    double latitude,
    double longitude,
    String title,
    String description,
    String? date,
  ) async {
    if (_mapObjectManager == null) return;

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞
      final hasDate = date?.isNotEmpty == true;
      final markerColor = hasDate ? Colors.blue.value : Colors.red.value;

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫—Ä—É–≥ –∫–∞–∫ –º–∞—Ä–∫–µ—Ä
      final circle = sdk.Circle(
        sdk.CircleOptions(
          position: sdk.GeoPoint(
            latitude: sdk.Latitude(latitude),
            longitude: sdk.Longitude(longitude),
          ),
          radius: sdk.Meter(50), // –†–∞–¥–∏—É—Å 50 –º–µ—Ç—Ä–æ–≤
          color: sdk.Color(markerColor),
          strokeColor: sdk.Color(Colors.white.value),
          strokeWidth: sdk.LogicalPixel(2.0),
          zIndex: sdk.ZIndex(1), // –î–æ–±–∞–≤–ª—è–µ–º zIndex
          userData: {
            'title': title,
            'description': description,
            'date': date ?? '',
            'type': 'point',
          },
        ),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥ –Ω–∞ –∫–∞—Ä—Ç—É
      _mapObjectManager!.addObject(circle);
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞: $e');
    }
  }

  void _addLineString({
    required List<sdk.GeoPoint> points,
    required String title,
    required String description,
    String? date,
  }) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
    if (points.isNotEmpty) {
      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
      final firstPoint = points.first;
      final lineData = {
        'latitude': firstPoint.latitude.value,
        'longitude': firstPoint.longitude.value,
        'title': title,
        'description': description,
        'date': date ?? '',
        'type': 'line',
        'pointsCount': points.length,
      };
      
      _allMarkers.add(lineData);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
      if (date != null && date.isNotEmpty) {
        _availableDates.add(date);
      }
      
      debugPrint('–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫: $title —Å ${points.length} —Ç–æ—á–∫–∞–º–∏');
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –Ω–∞ –∫–∞—Ä—Ç—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
    if (!_isInitialLoad) {
      Future.delayed(const Duration(milliseconds: 100), () {
        _addRealLineToMap(points, title, description, date);
      });
    }
  }

  Future<void> _addRealLineToMap(
    List<sdk.GeoPoint> points,
    String title,
    String description,
    String? date,
  ) async {
    if (_mapObjectManager == null || points.isEmpty) return;

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è –ª–∏–Ω–∏–∏
      final hasDate = date?.isNotEmpty == true;
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
      final colors = hasDate 
          ? [Colors.orange.value, Colors.deepOrange.value, Colors.amber.value]
          : [Colors.purple.value, Colors.deepPurple.value, Colors.indigo.value];
      final colorIndex = title.hashCode.abs() % colors.length;
      final lineColor = colors[colorIndex];

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–ª–∏–Ω–∏—é —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ add_objects.dart
      final polyline = sdk.Polyline(
        sdk.PolylineOptions(
          points: points,
          width: sdk.LogicalPixel(8.0), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –ª–∏–Ω–∏–∏ –¥–æ 8 –ø–∏–∫—Å–µ–ª–µ–π
          color: sdk.Color(lineColor),
          zIndex: sdk.ZIndex(1), // –î–æ–±–∞–≤–ª—è–µ–º zIndex –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ
          userData: {
            'title': title,
            'description': description,
            'date': date ?? '',
            'type': 'line',
            'pointsCount': points.length,
          },
        ),
      );

      // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –Ω–∞ –∫–∞—Ä—Ç—É
      _mapObjectManager!.addObject(polyline);
      debugPrint('–î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏–Ω–∏—è: $title —Å ${points.length} —Ç–æ—á–∫–∞–º–∏');
    } catch (e) {
      debugPrint('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–Ω–∏–∏: $e');
    }
  }

  void _clearMarkers() {
    _markers.clear();
    _allMarkers.clear();
    _availableDates.clear();
    _selectedDate = null;
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã —Å –∫–∞—Ä—Ç—ã
    _mapObjectManager?.removeAll();
    setState(() {}); // –û–±–Ω–æ–≤–ª—è–µ–º UI
  }

  void _filterMarkersByDate(String? date) {
    setState(() {
      _selectedDate = date;
      if (date == null) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
        _markers = List.from(_allMarkers);
      } else {
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
        _markers = _allMarkers.where((marker) => marker['date'] == date).toList();
      }
    });
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ
    _redrawMarkersOnMap();
  }

  void _redrawMarkersOnMap() {
    // –ù–ï –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    if (_isInitialLoad) return;
    
    // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É
    _mapObjectManager?.removeAll();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç—É
    for (final marker in _markers) {
      if (marker['type'] == 'point') {
        Future.delayed(const Duration(milliseconds: 50), () {
          _addRealMarkerToMap(
            marker['latitude'],
            marker['longitude'],
            marker['title'],
            marker['description'],
            marker['date'],
          );
        });
      } else if (marker['type'] == 'line') {
        // –î–ª—è –ª–∏–Ω–∏–π –Ω—É–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—á–∫–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ
        debugPrint('–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –ª–∏–Ω–∏–π –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      }
    }
  }

  void _centerMapOnMarkers() {
    if (_markers.isEmpty) return;

    try {
      // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—Ç–æ—á–µ–∫ –∏ –ª–∏–Ω–∏–π)
      double minLat = _markers.first['latitude'];
      double maxLat = _markers.first['latitude'];
      double minLng = _markers.first['longitude'];
      double maxLng = _markers.first['longitude'];

      for (final marker in _markers) {
        final lat = marker['latitude'] as double;
        final lng = marker['longitude'] as double;
        
        if (lat < minLat) minLat = lat;
        if (lat > maxLat) maxLat = lat;
        if (lng < minLng) minLng = lng;
        if (lng > maxLng) maxLng = lng;
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä
      final centerLat = (minLat + maxLat) / 2;
      final centerLng = (minLng + maxLng) / 2;

      // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑—É–º
      double zoom = 15.0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
      
      if (_markers.length > 1) {
        final latDiff = maxLat - minLat;
        final lngDiff = maxLng - minLng;
        final maxDiff = latDiff > lngDiff ? latDiff : lngDiff;
        
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑—É–º–∞
        if (maxDiff > 0.1) zoom = 10.0;
        else if (maxDiff > 0.05) zoom = 12.0;
        else if (maxDiff > 0.01) zoom = 14.0;
        else if (maxDiff > 0.005) zoom = 15.0;
        else zoom = 16.0;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–º–µ—Ä—ã
      setState(() {
        _cameraPosition = sdk.CameraPosition(
          point: sdk.GeoPoint(
            latitude: sdk.Latitude(centerLat),
            longitude: sdk.Longitude(centerLng),
          ),
          zoom: sdk.Zoom(zoom),
        );
      });
      
      final pointsCount = _markers.where((m) => m['type'] != 'line').length;
      final linesCount = _markers.where((m) => m['type'] == 'line').length;
      
      String message = '–ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞';
      if (pointsCount > 0 && linesCount > 0) {
        message += ' –ø–æ $pointsCount —Ç–æ—á–∫–∞–º –∏ $linesCount –ª–∏–Ω–∏—è–º';
      } else if (pointsCount > 0) {
        message += ' –ø–æ $pointsCount —Ç–æ—á–∫–∞–º';
      } else if (linesCount > 0) {
        message += ' –ø–æ $linesCount –ª–∏–Ω–∏—è–º';
      }
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.blue,
          duration: const Duration(seconds: 1),
        ),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è: $e'),
          backgroundColor: Colors.orange,
        ),
      );
    }
  }

  Future<void> _exportGeoJsonToFile() async {
    if (_geoJsonController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'),
          backgroundColor: Colors.orange,
        ),
      );
      return;
    }

    try {
      String? outputFile = await FilePicker.platform.saveFile(
        dialogTitle: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å GeoJSON —Ñ–∞–π–ª',
        fileName: 'geojson_points.geojson',
        type: FileType.custom,
        allowedExtensions: ['geojson', 'json'],
      );

      if (outputFile != null) {
        // –í –≤–µ–±-–≤–µ—Ä—Å–∏–∏ FilePicker –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç —Ñ–∞–π–ª
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('GeoJSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω'),
            backgroundColor: Colors.green,
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  void dispose() {
    _geoJsonController.dispose();
    _urlController.dispose();
    _clearMarkers();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('2GIS Maps & GeoJSON'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Column(
        children: [
          // –ö–∞—Ä—Ç–∞ - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
          SizedBox(
            height: MediaQuery.of(context).size.height * 0.4,
            child: Stack(
              children: [
                widget.sdkContext != null
                    ? sdk.MapWidget(
                        sdkContext: widget.sdkContext!,
                        mapOptions: sdk.MapOptions(
                          position: _cameraPosition,
                        ),
                        controller: _mapWidgetController,
                      )
                    : const Center(
                        child: Text(
                          'SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                          style: TextStyle(fontSize: 18),
                        ),
                      ),
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä–∫–µ—Ä–∞—Ö
                if (_markers.isNotEmpty)
                  Positioned(
                    top: 16,
                    left: 16,
                    child: Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: Colors.white.withValues(alpha: 0.9),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Text(
                        _selectedDate != null 
                            ? '–ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: ${_markers.length} (—Ñ–∏–ª—å—Ç—Ä: $_selectedDate)'
                            : '–ú–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ: ${_markers.length}',
                        style: const TextStyle(fontWeight: FontWeight.bold),
                      ),
                    ),
                  ),
              ],
            ),
          ),

          // –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è
          Expanded(
            child: SingleChildScrollView(
              padding: EdgeInsets.fromLTRB(
                16, 
                16, 
                16, 
                16 + MediaQuery.of(context).padding.bottom
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.stretch,
                children: [
                  // –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                  Row(
                    children: [
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _isLoading ? null : _loadGeoJsonFromFile,
                          icon: const Icon(Icons.file_upload),
                          label: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞'),
                        ),
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: ElevatedButton.icon(
                          onPressed: _isLoading ? null : () => _showUrlDialog(),
                          icon: const Icon(Icons.link),
                          label: const Text('–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ URL'),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),

                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        'GeoJSON –¥–∞–Ω–Ω—ã–µ:',
                        style: Theme.of(context).textTheme.titleMedium,
                      ),
                      TextButton.icon(
                        onPressed: _loadSampleGeoJson,
                        icon: const Icon(Icons.refresh, size: 16),
                        label: const Text('–ü—Ä–∏–º–µ—Ä'),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),

                  // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
                  if (_availableDates.isNotEmpty)
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ:',
                          style: Theme.of(context).textTheme.titleSmall,
                        ),
                        const SizedBox(height: 4),
                        Wrap(
                          spacing: 8,
                          children: [
                            FilterChip(
                              label: const Text('–í—Å–µ'),
                              selected: _selectedDate == null,
                              onSelected: (selected) {
                                if (selected) _filterMarkersByDate(null);
                              },
                            ),
                            ..._availableDates.map((date) => FilterChip(
                              label: Text(date),
                              selected: _selectedDate == date,
                              onSelected: (selected) {
                                _filterMarkersByDate(selected ? date : null);
                              },
                            )).toList(),
                          ],
                        ),
                        const SizedBox(height: 8),
                      ],
                    ),

                  // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
                  if (_markers.isNotEmpty)
                    Row(
                      children: [
                        const Text('–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: '),
                        ToggleButtons(
                          isSelected: [!_showMarkersList, _showMarkersList],
                          onPressed: (index) {
                            setState(() {
                              _showMarkersList = index == 1;
                            });
                          },
                          children: const [
                            Padding(
                              padding: EdgeInsets.symmetric(horizontal: 16),
                              child: Text('GeoJSON'),
                            ),
                            Padding(
                              padding: EdgeInsets.symmetric(horizontal: 16),
                              child: Text('–ú–∞—Ä–∫–µ—Ä—ã'),
                            ),
                          ],
                        ),
                      ],
                    ),
                  if (_markers.isNotEmpty) const SizedBox(height: 8),

                  // –ü–æ–ª–µ –≤–≤–æ–¥–∞ GeoJSON –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤
                  SizedBox(
                    height: 300,
                    child: _markers.isNotEmpty && _showMarkersList
                        ? ListView.builder(
                            itemCount: _markers.length,
                            itemBuilder: (context, index) {
                              final marker = _markers[index];
                              final hasDate = marker['date'] != null &&
                                  marker['date'].toString().isNotEmpty;
                              final isLine = marker['type'] == 'line';

                              return Card(
                                margin: const EdgeInsets.symmetric(vertical: 2),
                                child: ListTile(
                                  leading: Icon(
                                    isLine
                                        ? (hasDate ? Icons.timeline : Icons.route)
                                        : (hasDate ? Icons.event_available : Icons.location_on),
                                    color: isLine
                                        ? (hasDate ? Colors.orange : Colors.purple)
                                        : (hasDate ? Colors.blue : Colors.red),
                                  ),
                                  title: Text(
                                    marker['title'] ?? (isLine ? '–õ–∏–Ω–∏—è ${index + 1}' : '–¢–æ—á–∫–∞ ${index + 1}'),
                                    style: const TextStyle(
                                        fontWeight: FontWeight.bold),
                                  ),
                                  subtitle: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        isLine 
                                            ? 'üõ£Ô∏è –õ–∏–Ω–∏—è (${marker['pointsCount']} —Ç–æ—á–µ–∫) - ${marker['latitude'].toStringAsFixed(4)}, ${marker['longitude'].toStringAsFixed(4)}'
                                            : 'üìç ${marker['latitude'].toStringAsFixed(4)}, ${marker['longitude'].toStringAsFixed(4)}',
                                        style: const TextStyle(
                                            fontSize: 12, color: Colors.grey),
                                      ),
                                      if (marker['description'] != null &&
                                          marker['description']
                                              .toString()
                                              .isNotEmpty)
                                        Padding(
                                          padding:
                                              const EdgeInsets.only(top: 4),
                                          child: Text(
                                            marker['description'].toString(),
                                            style:
                                                const TextStyle(fontSize: 13),
                                          ),
                                        ),
                                      if (hasDate)
                                        Padding(
                                          padding:
                                              const EdgeInsets.only(top: 4),
                                          child: Container(
                                            padding: const EdgeInsets.symmetric(
                                                horizontal: 8, vertical: 2),
                                            decoration: BoxDecoration(
                                              color: (isLine ? Colors.orange : Colors.blue)
                                                  .withValues(alpha: 0.1),
                                              borderRadius:
                                                  BorderRadius.circular(12),
                                            ),
                                            child: Text(
                                              'üìÖ ${marker['date']}',
                                              style: TextStyle(
                                                fontSize: 12,
                                                color: isLine ? Colors.orange : Colors.blue,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                          ),
                                        ),
                                    ],
                                  ),
                                  isThreeLine: true,
                                  dense: false,
                                ),
                              );
                            },
                          )
                        : TextField(
                            controller: _geoJsonController,
                            maxLines: null,
                            decoration: const InputDecoration(
                              border: OutlineInputBorder(),
                              hintText: '–í—Å—Ç–∞–≤—å—Ç–µ GeoJSON –¥–∞–Ω–Ω—ã–µ –∑–¥–µ—Å—å...',
                            ),
                            style: const TextStyle(fontSize: 12),
                          ),
                  ),

                  const SizedBox(height: 16),

                  // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                  Column(
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: () {
                                _isInitialLoad = false; // –≠—Ç–æ —Ä—É—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                                _parseAndDisplayGeoJson();
                              },
                              icon: const Icon(Icons.add_location),
                              label: const Text('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ—á–∫–∏'),
                            ),
                          ),
                          const SizedBox(width: 8),
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: _clearMarkers,
                              icon: const Icon(Icons.clear),
                              label: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: _centerMapOnMarkers,
                              icon: const Icon(Icons.center_focus_strong),
                              label: const Text('–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å'),
                            ),
                          ),
                          const SizedBox(width: 8),
                          Expanded(
                            child: ElevatedButton.icon(
                              onPressed: _exportGeoJsonToFile,
                              icon: const Icon(Icons.file_download),
                              label: const Text('–≠–∫—Å–ø–æ—Ä—Ç'),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}